// schema.prisma


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:randompassword@localhost:5432/Thebeing?schema=public" 
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique
  email          String         @unique
  avatarUrl      String?
  bio            String?
  role           Role           @default(USER)
  socialLogins   SocialLogin[]
  wallets        Wallet[]
  createdNFTs    NFT[]          @relation("Creator")
  ownedNFTs      NFT[]          @relation("Owner")
  votes          Vote[]
  proposals      Proposal[]
  notifications  Notification[]
  rewards        UserReward[]
  favoriteGenres String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([email, username])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model SocialLogin {
  id         String @id @default(uuid())
  provider   String
  providerId String
  user       User   @relation(fields: [userId], references: [id])
  userId     String

  @@unique([provider, providerId])
}

model Wallet {
  id               String         @id @default(uuid())
  address          String         @unique
  type             WalletType     @default(ETHEREUM)
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  tokenBalances    TokenBalance[]
  fromTransactions Transaction[]  @relation("FromTransactions")
  toTransactions   Transaction[]  @relation("ToTransactions")
  createdAt        DateTime       @default(now())

  @@index([address, userId])
}

enum WalletType {
  ETHEREUM
  SOLANA
  POLYGON
}

model TokenBalance {
  id        String   @id @default(uuid())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  String
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   String
  balance   Float
  updatedAt DateTime @updatedAt

  @@unique([walletId, tokenId])
}

model Token {
  id              String         @id @default(uuid())
  name            String
  symbol          String         @unique
  contractAddress String
  decimals        Int
  balances        TokenBalance[]
  Transaction     Transaction[]
}

model NFT {
  id              String        @id @default(uuid())
  tokenId         String
  contractAddress String
  name            String
  description     String
  imageUrl        String
  traits          Json?
  creator         User          @relation("Creator", fields: [creatorId], references: [id])
  creatorId       String
  owner           User          @relation("Owner", fields: [ownerId], references: [id])
  ownerId         String
  collection      Collection?   @relation(fields: [collectionId], references: [id])
  collectionId    String?
  listedForSale   Boolean       @default(false)
  price           Float?
  createdAt       DateTime      @default(now())
  Transaction     Transaction[]

  @@unique([contractAddress, tokenId])
  @@index([ownerId, creatorId])
}

model Collection {
  id          String   @id @default(uuid())
  name        String
  description String?
  nfts        NFT[]
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proposal {
  id          String           @id @default(uuid())
  title       String
  description String
  proposer    User             @relation(fields: [proposerId], references: [id])
  proposerId  String
  options     ProposalOption[]
  status      ProposalStatus   @default(PENDING)
  startTime   DateTime
  endTime     DateTime
  votes       Vote[]
  createdAt   DateTime         @default(now())
  Transaction Transaction[]
  updatedAt   DateTime         @updatedAt
}

model ProposalOption {
  id         String   @id @default(uuid())
  label      String
  imageUrl   String?
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  votes      Vote[]
}

enum ProposalStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Vote {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  proposal   Proposal       @relation(fields: [proposalId], references: [id])
  proposalId String
  option     ProposalOption @relation(fields: [optionId], references: [id])
  optionId   String
  power      Float
  txHash     String?
  votedAt    DateTime       @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id           String    @id @default(uuid())
  txHash       String    @unique
  type         TxType
  status       TxStatus  @default(PENDING)
  fromWallet   Wallet    @relation("FromTransactions", fields: [fromWalletId], references: [id])
  fromWalletId String
  toWallet     Wallet?   @relation("ToTransactions", fields: [toWalletId], references: [id])
  toWalletId   String?
  token        Token?    @relation(fields: [tokenId], references: [id])
  tokenId      String?
  nft          NFT?      @relation(fields: [nftId], references: [id])
  nftId        String?
  amount       Float?
  gasFee       Float?
  blockNumber  Int?
  timestamp    DateTime
  proposal     Proposal? @relation(fields: [proposalId], references: [id])
  proposalId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum TxType {
  TOKEN_TRANSFER
  NFT_MINT
  NFT_TRANSFER
  VOTE
  REWARD_CLAIM
  GAS_FEE
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  VOTE_UPDATE
  NFT_ACTIVITY
  REWARD
  GOVERNANCE
}

model UserReward {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      RewardType
  amount    Float
  claimed   Boolean    @default(false)
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum RewardType {
  VOTING_PARTICIPATION
  NFT_CREATION
  COMMUNITY_CONTRIBUTION
  REFERRAL
}
